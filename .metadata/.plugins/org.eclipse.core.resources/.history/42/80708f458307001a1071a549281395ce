package poly.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import poly.dto.NoticeDTO;
import poly.service.INoticeService;

@Controller
public class NoticeController {
	private Logger log = Logger.getLogger(this.getClass());

	@Resource(name = "NoticeService")
	private INoticeService noticeService;

	// 사용자 공지사항 페이지
	@RequestMapping(value = "/notice/notice")
	public String NoticePage(HttpServletRequest request, Model model, HttpSession session) {

		log.info(this.getClass());
		int pageNum = 0;
		String pgNum = request.getParameter("pgNum");
		try {
			pageNum = Integer.parseInt(pgNum);
		} catch (Exception e) {
			// TODO: handle exception
			pageNum = 0;
		}

		// 전체 공지사항 갯수 확인
		int cnt = 0;
		try {
			cnt = noticeService.getNoticeCnt();
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.info(cnt);
		List<NoticeDTO> nList = new ArrayList<>();//

		if (cnt == 0) {
			NoticeDTO nDTO = new NoticeDTO();
			nDTO.setTitle("없음");
			nList.add(nDTO);
		} else {
			int iNum = (pageNum - 1) * 10;

			try {
				nList = noticeService.getNoticeList(iNum);//
			} catch (Exception e) {
				e.printStackTrace();
			}
			for (int i = 0; i < nList.size(); i++) {
				nList.get(i).setiNum(cnt - i - iNum);
			}

		}

		model.addAttribute("nList", nList);
		model.addAttribute("cnt", cnt);
		model.addAttribute("pgNum", pageNum);
		return "/notice/notice";
	}

	// 사용자 공지사항 이전 페이지
	@RequestMapping(value = "notice/NoticePreviousPage")
	public String NoticePreviousPage(HttpServletRequest request, Model model, HttpSession session) {
		int pageNum = 0;
		String pgNum = request.getParameter("pgNum");
		pageNum = Integer.parseInt(pgNum);
		pageNum -= 1;
		// 전체 공지사항 갯수 확인
		int cnt = 0;
		try {
			cnt = noticeService.getNoticeCnt();
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.info(cnt);
		List<NoticeDTO> nList = new ArrayList<>();

		if (cnt == 0) {
			NoticeDTO nDTO = new NoticeDTO();
			nDTO.setTitle("없음");
			nList.add(nDTO);
		} else {
			int iNum = (pageNum - 1) * 10;

			try {
				nList = noticeService.getNoticeList(iNum);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}

		model.addAttribute("nList", nList);
		model.addAttribute("cnt", cnt);
		model.addAttribute("pgNum", pageNum);
		return "/notice/notice";

	}

	// 사용자 공지사항 다음 페이지
	@RequestMapping(value = "notice/NoticeNextPage")
	public String NoticeNextPage(HttpServletRequest request, Model model, HttpSession session) {
		int pageNum = 0;
		String pgNum = request.getParameter("pgNum");
		pageNum = Integer.parseInt(pgNum);
		pageNum += 1;
		// 전체 공지사항 갯수 확인
		int cnt = 0;
		try {
			cnt = noticeService.getNoticeCnt();
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.info(cnt);
		List<NoticeDTO> nList = new ArrayList<>();

		if (cnt == 0) {
			NoticeDTO nDTO = new NoticeDTO();
			nDTO.setTitle("없음");
			nList.add(nDTO);
		} else {
			int iNum = (pageNum - 1) * 10;

			try {
				nList = noticeService.getNoticeList(iNum);
			} catch (Exception e) {
				e.printStackTrace();
			}

		}

		model.addAttribute("nList", nList);
		model.addAttribute("cnt", cnt);
		model.addAttribute("pgNum", pageNum);
		return "/notice/notice";
	}

	// 사용자 공지사항 자세히보기
	@RequestMapping(value = "main/NoticeDetail")
	public String NoticeDetailUser(HttpServletRequest request, Model model, HttpSession session) {
		int iNum = 0;
		iNum = Integer.parseInt(request.getParameter("iNum"));
		int cnt = 0;
		try {
			cnt = noticeService.getNoticeCnt();
		} catch (Exception e) {
			e.printStackTrace();
		}
		int pgNum = (cnt - iNum) / 10 + 1;
		int iNum2 = iNum - 1;
		NoticeDTO nDTO = new NoticeDTO();
		try {
			nDTO = noticeService.getNoticeDetail(iNum2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (nDTO == null) {
			model.addAttribute("msg", "공지사항이 없습니다.");
			model.addAttribute("url", "/main/?pgNum=1");
			return "redirect";
		} else {
			model.addAttribute("nDTO", nDTO);
			model.addAttribute("iNum", iNum);
			model.addAttribute("pgNum", pgNum);
			return "/main/Notice/NoticeDetail";
		}
	}

	// 사용자 공지사항 자세히보기 이전버튼
	@RequestMapping(value = "main/NoticePreviousDetail")
	public String NoticePreviousDetail(HttpServletRequest request, Model model, HttpSession session) {
		int iNum = 0;
		iNum = Integer.parseInt(request.getParameter("iNum"));
		int cnt = 0;
		try {
			cnt = noticeService.getNoticeCnt();
		} catch (Exception e) {
			e.printStackTrace();
		}
		int pgNum = (cnt - iNum) / 10 + 1;
		iNum += 1;
		if (iNum > cnt) {
			model.addAttribute("msg", "첫번째 공지사항입니다.");
			model.addAttribute("url", "/main/?pgNum=1");
			return "redirect";
		}
		int iNum2 = iNum - 1;

		NoticeDTO nDTO = new NoticeDTO();
		try {
			nDTO = noticeService.getNoticeDetail(iNum2);
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("nDTO", nDTO);
		model.addAttribute("iNum", iNum);
		model.addAttribute("pgNum", pgNum);
		return "/main/Notice/NoticeDetail";

	}

	// 사용자 공지사항 자세히보기 다음버튼
	@RequestMapping(value = "main/NoticeNextDetail")
	public String NoticeNextDetail(HttpServletRequest request, Model model, HttpSession session) {
		int iNum = 0;
		iNum = Integer.parseInt(request.getParameter("iNum"));
		int cnt = 0;
		try {
			cnt = noticeService.getNoticeCnt();
		} catch (Exception e) {
			e.printStackTrace();
		}
		int pgNum = (cnt - iNum) / 10 + 1;
		iNum -= 1;
		if (iNum <= 0) {
			model.addAttribute("msg", "마지막 공지사항입니다.");
			model.addAttribute("url", "/main/?pgNum=" + pgNum);
			return "redirect";
		}
		int iNum2 = iNum - 1;
		NoticeDTO nDTO = new NoticeDTO();
		try {
			nDTO = noticeService.getNoticeDetail(iNum2);
		} catch (Exception e) {
			e.printStackTrace();
		}

		model.addAttribute("nDTO", nDTO);
		model.addAttribute("iNum", iNum);
		model.addAttribute("pgNum", pgNum);
		return "/main/Notice/NoticeDetail";

	}

	// 관리자 공지사항 등록 페이지 ok
	@RequestMapping(value = "notice/noticeWrite")
	public String noticeWrite(HttpSession session, Model model) {

		String userId = (String) session.getAttribute("userId");

		if (userId != null) {
			return "/notice/noticeWrite";
		} else {
			model.addAttribute("msg", "로그인이 필요한 서비스 입니다.");
			model.addAttribute("url", "/main/llogin.do");
			return "/redirect";
		}
	}

	// 관리자 공지사항 등록 실행
	@RequestMapping(value = "notice/NoticeRegProc")
	public String GuideRegProc(HttpServletRequest request, Model model, HttpSession session) throws Exception {
		log.info(this.getClass());
		String title = request.getParameter("title");
		String content = request.getParameter("content");
		String userId = (String) session.getAttribute("userId");

		NoticeDTO nDTO = new NoticeDTO();
		nDTO.setContent(content);
		nDTO.setTitle(title);
		nDTO.setRegId(userId);

		int result = 0;
		try {
			result = noticeService.insertGuideInfo(nDTO);
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (result > 0) {
			model.addAttribute("msg", "공지사항이 등록되었습니다.");
			model.addAttribute("url", "/notice/notice.do?pgNum=1");
		} else {
			model.addAttribute("msg", "공지사항 등록에 실패했습니다.");
			model.addAttribute("url", "/notice/notice.do?pgNum=1");
		}

		return "/redirect";
	}

}
