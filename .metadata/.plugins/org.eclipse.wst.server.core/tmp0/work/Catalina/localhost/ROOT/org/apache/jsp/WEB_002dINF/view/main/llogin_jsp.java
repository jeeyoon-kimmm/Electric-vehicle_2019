/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.41
 * Generated at: 2019-12-07 11:04:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class llogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!Doctype html>\r\n");
      out.write("<html lang=\"en\" dir=\"ltr\">\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n");
      out.write("    <meta http-equiv=\"Content-Language\" content=\"en\" />\r\n");
      out.write("    <meta name=\"msapplication-TileColor\" content=\"#2d89ef\">\r\n");
      out.write("    <meta name=\"theme-color\" content=\"#4188c9\">\r\n");
      out.write("    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\"/>\r\n");
      out.write("    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n");
      out.write("    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n");
      out.write("    <meta name=\"HandheldFriendly\" content=\"True\">\r\n");
      out.write("    <meta name=\"MobileOptimized\" content=\"320\">\r\n");
      out.write("    <link rel=\"icon\" href=\"./favicon.ico\" type=\"image/x-icon\"/>\r\n");
      out.write("    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"./favicon.ico\" />\r\n");
      out.write("    <!-- Generated: 2018-04-06 16:27:42 +0200 -->\r\n");
      out.write("    <title>로그인</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,300i,400,400i,500,500i,600,600i,700,700i&amp;subset=latin-ext\">\r\n");
      out.write("    <script src=\"./assets/js/require.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("      requirejs.config({\r\n");
      out.write("          baseUrl: '.'\r\n");
      out.write("      });\r\n");
      out.write("    </script>\r\n");
      out.write("    <!-- Dashboard Core -->\r\n");
      out.write("    <link href=\"/css/dashboard.css\" rel=\"stylesheet\" />\r\n");
      out.write("    <script src=\"./assets/js/dashboard.js\"></script>\r\n");
      out.write("    <!-- c3.js Charts Plugin -->\r\n");
      out.write("    <link href=\"./assets/plugins/charts-c3/plugin.css\" rel=\"stylesheet\" />\r\n");
      out.write("    <script src=\"./assets/plugins/charts-c3/plugin.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <!-- Input Mask Plugin -->\r\n");
      out.write("    <script src=\"./assets/plugins/input-mask/plugin.js\"></script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body class=\"\">\r\n");
      out.write("    <div class=\"page\">\r\n");
      out.write("      <div class=\"page-single\">\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("          <div class=\"row\">\r\n");
      out.write("            <div class=\"col col-login mx-auto\">\r\n");
      out.write("              <div class=\"text-center mb-6\">\r\n");
      out.write("                <img src=\"./assets/brand/tabler.svg\" class=\"h-6\" alt=\"\">\r\n");
      out.write("              </div>\r\n");
      out.write("              <form class=\"card\" method=\"post\" action=\"/Loginbtn.do\">\r\n");
      out.write("                <div class=\"card-body p-6\">\r\n");
      out.write("                  <div class=\"card-title\"> <a href=\"/index.do\">Home</a></div>\r\n");
      out.write("                  <div class=\"form-group\">\r\n");
      out.write("                    <label class=\"form-label\">ID</label>\r\n");
      out.write("                    <input type=\"id\" name=\"userId\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"아이디를 입력하세요\">\r\n");
      out.write("                  </div>\r\n");
      out.write("                  <div class=\"form-group\">\r\n");
      out.write("                    <label class=\"form-label\">\r\n");
      out.write("                      Password\r\n");
      out.write("                      <a href=\"/main/userFind.do\" class=\"float-right small\">아이디/비밀번호 찾기</a>\r\n");
      out.write("                    </label>\r\n");
      out.write("                    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" name=\"userPassword\" placeholder=\"비밀번호를 입력하세요\">\r\n");
      out.write("                  </div>\r\n");
      out.write("                  <div class=\"form-group\">\r\n");
      out.write("             <!--        <label class=\"custom-control custom-checkbox\">\r\n");
      out.write("                      <input type=\"checkbox\" class=\"custom-control-input\" name=\"userCheck\" />\r\n");
      out.write("                      <span class=\"custom-control-label\">아이디 기억하기</span>\r\n");
      out.write("                    </label> -->\r\n");
      out.write("                  </div>\r\n");
      out.write("                  <div class=\"form-footer\">\r\n");
      out.write("                    <button type=\"submit\" class=\"btn btn-primary btn-block\" value=\"로그인\">로그인</button>\r\n");
      out.write("                  </div>\r\n");
      out.write("                </div>\r\n");
      out.write("              </form>\r\n");
      out.write("              <div class=\"text-center text-muted\">\r\n");
      out.write("                Don't have account yet? <a href=\"/main/add.do\">회원가입</a>\r\n");
      out.write("              </div>\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("\t\twindow.onload = function() {\r\n");
      out.write("\t\t\tvar userInputId = getCookie(\"userInputId\");//저장된 쿠기값 가져오기\r\n");
      out.write("\t\t\t$('input[name=userId]').val(userInputId);\r\n");
      out.write("\r\n");
      out.write("\t\t\tif ($('input[name=userId]').val() != \"\") { // 그 전에 ID를 저장해서 처음 페이지 로딩\r\n");
      out.write("\t\t\t\t// 아이디 저장하기 체크되어있을 시,\r\n");
      out.write("\t\t\t\t$('input[name=userCheck]').attr(\"checked\", true); // ID 저장하기를 체크 상태로 두기.\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t$('input[name=userCheck]').change(function() { // 체크박스에 변화가 발생시\r\n");
      out.write("\t\t\t\tif ($('input[name=userCheck]').is(\":checked\")) { // ID 저장하기 체크했을 때,\r\n");
      out.write("\t\t\t\t\tvar userInputId = $('input[name=userId]').val();\r\n");
      out.write("\t\t\t\t\tsetCookie(\"userInputId\", userInputId, 7); // 7일 동안 쿠키 보관\r\n");
      out.write("\t\t\t\t} else { // ID 저장하기 체크 해제 시,\r\n");
      out.write("\t\t\t\t\tdeleteCookie(\"userInputId\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t// ID 저장하기를 체크한 상태에서 ID를 입력하는 경우, 이럴 때도 쿠키 저장.\r\n");
      out.write("\t\t\t$('input[name=userId]').keyup(function() { // ID 입력 칸에 ID를 입력할 때,\r\n");
      out.write("\t\t\t\tif ($('input[name=userCheck]').is(\":checked\")) { // ID 저장하기를 체크한 상태라면,\r\n");
      out.write("\t\t\t\t\tvar userInputId = $('input[name=userId]').val();\r\n");
      out.write("\t\t\t\t\tsetCookie(\"userInputId\", userInputId, 7); // 7일 동안 쿠키 보관\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\tfunction setCookie(cookieName, value, exdays) {\r\n");
      out.write("\t\t\tvar exdate = new Date();\r\n");
      out.write("\t\t\texdate.setDate(exdate.getDate() + exdays);\r\n");
      out.write("\t\t\tvar cookieValue = escape(value)\r\n");
      out.write("\t\t\t\t\t+ ((exdays == null) ? \"\" : \"; expires=\"\r\n");
      out.write("\t\t\t\t\t\t\t+ exdate.toGMTString());\r\n");
      out.write("\t\t\tdocument.cookie = cookieName + \"=\" + cookieValue;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction deleteCookie(cookieName) {\r\n");
      out.write("\t\t\tvar expireDate = new Date();\r\n");
      out.write("\t\t\texpireDate.setDate(expireDate.getDate() - 1);\r\n");
      out.write("\t\t\tdocument.cookie = cookieName + \"= \" + \"; expires=\"\r\n");
      out.write("\t\t\t\t\t+ expireDate.toGMTString();\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction getCookie(cookieName) {\r\n");
      out.write("\t\t\tcookieName = cookieName + '=';\r\n");
      out.write("\t\t\tvar cookieData = document.cookie;\r\n");
      out.write("\t\t\tvar start = cookieData.indexOf(cookieName);\r\n");
      out.write("\t\t\tvar cookieValue = '';\r\n");
      out.write("\t\t\tif (start != -1) {\r\n");
      out.write("\t\t\t\tstart += cookieName.length;\r\n");
      out.write("\t\t\t\tvar end = cookieData.indexOf(';', start);\r\n");
      out.write("\t\t\t\tif (end == -1)\r\n");
      out.write("\t\t\t\t\tend = cookieData.length;\r\n");
      out.write("\t\t\t\tcookieValue = cookieData.substring(start, end);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn unescape(cookieValue);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
